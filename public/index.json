[
{
	"uri": "//localhost:1313/",
	"title": "Deploying Spring Boot CRUD API Application to AWS Using Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Deploying Spring Boot CRUD API Application to AWS Using Elastic Beanstalk Overview Using AWS Elastic Beanstalk to deploy a Spring Boot CRUD API application.\nContents Introduction Preparation Steps Configure RDS Cleanup Resources "
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/3.1-create-rds/",
	"title": "Create RDS",
	"tags": [],
	"description": "",
	"content": " Go to the Elastic Beanstalk management console. Click Create application. Name the application CRUD_SpringBoot_Exercise. Choose Tomcat as the platform (the system will suggest Platform branch and Platform version) and then click Next at the bottom of the screen. Click Next to continue to step 2. Select \u0026ldquo;Create and use new service role.\u0026rdquo; Then choose the EC2 Key Pair and EC2 instance profile created in section 2. Click Next to proceed to step 3. In step 3 (Set up networking, database, and tags - optional), scroll down to the Database section, click Enable database, select the appropriate engine (in this case, PostgreSQL), and set up the username and password for the database server. Continue clicking Next until step 6, and then submit. You have now created a new application on Elastic Beanstalk. At the same time, a new environment will be created for the application. It will take some time for the environment to be fully set up and for the new application to be functional.\nWhen the system displays the screen below, the application has been successfully created. On that screen, the Creating RDS database name is a string code, which will be the RDS name used to publicize the RDS in the next step.\nGo to the EC2 management console.\nClick Public Linux Instance. Click Actions. Click Security. Click Modify IAM role. On the Modify IAM role page:\nSelect SSM-Role. Click Save. Wait about 10 minutes before proceeding to the next step. During this time, the EC2 instance will automatically register with the Session Manager.\nGo to the AWS Systems Manager management console.\nScroll down the left-hand menu. Click Session Manager. Click Start Session. Select Public Linux Instance and click Start session to access the instance.\nA terminal will appear in the browser. Check with the command sudo tcpdump -nn port 22 and sudo tcpdump. You will see no SSH traffic, only HTTPS traffic.\nBy connecting to the public instance without opening the SSH port 22, security is enhanced by preventing attacks on the SSH port.\nOne drawback of this approach is that you need to open the Security Group outbound on port 443 to the internet. Since this is a public instance, it might not be an issue, but if you want extra security, you can block port 443 to the internet and still use the Session Manager. We\u0026rsquo;ll go through this approach in the private instance section below.\nYou can terminate the session to disconnect before moving on to the next step.\n"
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "First, let\u0026rsquo;s learn about AWS\u0026rsquo;s Elastic Beanstalk service. Elastic Beanstalk is a service from Amazon Web Services (AWS) that helps deploy and manage web applications easily without worrying about the underlying infrastructure. With Elastic Beanstalk, you just upload your application code, and the service will automatically handle deployment, provisioning of resources, load balancing, auto-scaling, and monitoring the application\u0026rsquo;s health.\nKey features of Elastic Beanstalk include:\nMulti-language support: Elastic Beanstalk supports multiple languages and application environments such as Java, .NET, Node.js, PHP, Python, Ruby, Go, and Docker. Automatic resource management: The service automatically manages basic resources such as EC2 instances, load balancers, scaling policies, and databases. Integration with other AWS services: Elastic Beanstalk integrates well with other AWS services like RDS, S3, CloudWatch, and many others. Easy customization: While Elastic Beanstalk automates many parts of the deployment process, you still have control over configurations and can customize them according to your specific needs. Monitoring and tracking: You can monitor your application\u0026rsquo;s performance through the Elastic Beanstalk dashboard or use CloudWatch for more detailed tracking. Elastic Beanstalk is ideal for developers who want to focus on building applications without worrying too much about managing infrastructure.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/",
	"title": "Prepare EC2 Key Pair",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create an EC2 Key Pair.\nKey Pair is a pair of encryption keys used to access an EC2 instance via SSH.\nAccess the AWS Management Console.\nNavigate to the EC2 service. In the Network \u0026amp; Security section, select \u0026ldquo;Key pairs\u0026rdquo;. Select Create Key Pair. Name your key pair and select a format. Click \u0026ldquo;Create key pair\u0026rdquo; to generate the EC2 Key Pair.\nThe format of the key pair you select will depend on the operating system you are using to connect to the EC2 instance when deploying your Spring Boot application to AWS.\n.pem (Privacy Enhanced Mail): The .pem format is typically used on Linux and macOS systems. These operating systems support using the .pem file directly to connect via SSH to an EC2 instance. The built-in SSH tool on Linux and macOS will use the .pem file for authentication.\n.ppk (PuTTY Private Key): The .ppk format is used on Windows when using PuTTY (a popular SSH client on Windows). PuTTY does not support .pem files directly, so you will need to convert the .pem file to .ppk using the PuTTYgen tool.\nDownload the key pair to your computer. You will need this file to access the EC2 instance.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-createiamrole/",
	"title": "Create Instance Profile",
	"tags": [],
	"description": "",
	"content": "Create Instance Profile In this step, we will create an Instance Profile. An Instance Profile allows your EC2 instance to access other AWS resources such as S3, RDS, or DynamoDB.\nGo to the IAM service management console\nOn the left-hand navigation pane, click Roles.\nClick Create role.\nClick AWS service and select EC2 as the service.\nClick Next. In the Search box, enter AmazonS3FullAccess and press Enter to find this policy.\nSelect the AmazonS3FullAccess policy. Click Next. Name the Role ElasticBeanstalk-EC2-Role in the Role Name field.\nClick Create Role. The preparation steps are now complete. Next, we will create the RDS for the Spring Boot project.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "\rYou need to have a working Spring Boot CRUD API project ready to deploy to AWS.\nIn this step, we need to create an EC2 Key Pair and Instance Profile. When deploying an application with Elastic Beanstalk, creating a key pair and an instance profile for EC2 is crucial for you to access and manage the created resources.\nContents Prepare EC2 Key Pair Create Instance Profile "
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/3.2-private-instance/",
	"title": "Public RDS",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure RDS with \u0026ldquo;Anywhere IPv4\u0026rdquo; access. Setting up RDS with \u0026ldquo;Anywhere IPv4\u0026rdquo; access (0.0.0.0/0) allows any IP address to access your database from the internet. This is useful when you need to connect from outside AWS, such as during development or testing.\nHowever, this setup comes with security risks, such as brute force attacks. In a production environment, it is recommended to limit access by allowing only specific IPs or using a VPN/SSH Tunnel to secure the connection.\nSteps: Go to the RDS Management Console. In the left-hand menu, click Databases. Scroll down to the Security group rules section and select the security group labeled as EC2 Security Group - Inbound. On the Security Groups screen, click the only Security Group displayed. You can verify that this is the correct RDS instance by checking the Security group name. Remove the first three letters \u0026ldquo;rds\u0026rdquo;, and the remaining string will be the RDS name created in previous steps. On the next screen, select the only Security group rule displayed and click Edit inbound rules. On the customization screen that appears, click Delete to remove the existing Security group rule and click Add rule to create a new one. Set the Type to PostgreSQL and the Source to Anywhere IPv4. Click Save Rules to complete the configuration. Once the system displays the following screen, your RDS instance has been successfully made public. "
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/",
	"title": "Configuring RDS",
	"tags": [],
	"description": "",
	"content": "The first step is to configure RDS on AWS for the Spring Boot project.\nAmazon RDS (Relational Database Service) is AWS\u0026rsquo;s managed relational database service in the cloud.\nIt provides:\nAutomated Management: Automated backups, updates, and patching. Scalability: Easy resizing of instances and storage capacity. High Availability: Automatic backups and failover deployment. Security: Data encryption and access control. Compatibility: Supports MySQL, PostgreSQL, MariaDB, Oracle, and SQL Server. Easy Monitoring: Integrated with CloudWatch for performance monitoring. Content 3.1. Create RDS\n3.2. Public RDS 3.3. Link RDS to Project 3.4. Upload Project to AWS\n"
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/3.3-public-instance/",
	"title": "Link RDS to Project",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure RDS with \u0026ldquo;Anywhere IPv4\u0026rdquo; access. Setting RDS with \u0026ldquo;Anywhere IPv4\u0026rdquo; (0.0.0.0/0) allows any IP address to access your database from the internet. This is useful for connecting from outside AWS, such as during development or testing.\nHowever, it poses significant security risks, such as brute force attacks. In a production environment, you should restrict access by allowing specific IPs only or use VPN/SSH Tunnel to secure the connection.\nSteps to Follow: Access the Elastic Beanstalk management console. On the left menu, select the environment named CRUD_SpringBoot_Excercise and click on Configuration. Scroll down to the Networking and database section and click Edit. Scroll down to the Database section, where you will see the endpoint of the database you created. Copy this endpoint. Go to your Spring Boot project, open the application.properties file, and replace localhost:5432 with the endpoint you copied. At this point, you have linked the RDS endpoint to your project, but additional steps are needed to complete the setup.\nAccess pgAdmin4. pgAdmin4 is a PostgreSQL database management tool with a graphical interface. It helps manage databases, tables, and other objects easily and provides a query manager to run SQL commands visually. In the left menu, right-click on Server, select Register, then Server. Enter the server name, switch to the Connection tab, add the hostname as the endpoint you copied, enter the username and password, then click Save to connect to the database server. Right-click on the connected server, select Create, then Database to create a database named excercise, which matches the database configured in your project. Click Save to create the database. Return to your project. Before running the project to initialize tables in the database, change spring.jpa.hibernate.ddl-auto=**update** to spring.jpa.hibernate.ddl-auto=**create**. Run the project to create the tables. After the project runs successfully, package the project into a .war file for upload and deployment to AWS. In the right menu, click on the Maven logo, then click on Lifecycle. When the menu expands, double-click package to package the project into a .war file. After packaging is complete, you will see a screen with the path to the packaged .war file. "
},
{
	"uri": "//localhost:1313/4-cleanup/",
	"title": "Cleanup Resources",
	"tags": [],
	"description": "",
	"content": "We will follow these steps to delete the resources created during this workshop.\nDelete Elastic Beanstalk Application Go to the Elastic Beanstalk management console. Click on the Application tab. Select the application you want to delete, CRUD_SpringBoot_Exercise. Click on Actions. Click on Delete Application. Delete EC2 Key Pair and EC2 Instance Profile Go to the EC2 Key Pair console. Select the key pair you want to delete, EC2_RODNGO. Click on Actions. Click on Delete. Go to the IAM management console. Click on Roles. Select the roles you want to delete. Click on Delete. "
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/3.4-upload_deploy/",
	"title": "Upload Project to AWS",
	"tags": [],
	"description": "",
	"content": " Access the Elastic Beanstalk management console. Select Upload and deploy. Choose the .war file from the path where you packaged your project and give it a version name. Click Deploy. Wait a few minutes for the system to upload the .war file to AWS. When the screen looks like this, your Spring Boot project has been successfully deployed to AWS. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]